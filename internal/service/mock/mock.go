// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/nnemirovsky/pacgen/internal/model"
)

// RuleRepository is a mock of RuleRepository interface.
type RuleRepository struct {
	ctrl     *gomock.Controller
	recorder *RuleRepositoryMockRecorder
}

// RuleRepositoryMockRecorder is the mock recorder for RuleRepository.
type RuleRepositoryMockRecorder struct {
	mock *RuleRepository
}

// NewRuleRepository creates a new mock instance.
func NewRuleRepository(ctrl *gomock.Controller) *RuleRepository {
	mock := &RuleRepository{ctrl: ctrl}
	mock.recorder = &RuleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RuleRepository) EXPECT() *RuleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *RuleRepository) Create(ctx context.Context, rule *model.Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *RuleRepositoryMockRecorder) Create(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*RuleRepository)(nil).Create), ctx, rule)
}

// Delete mocks base method.
func (m *RuleRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *RuleRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*RuleRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *RuleRepository) GetAll(ctx context.Context) ([]model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *RuleRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*RuleRepository)(nil).GetAll), ctx)
}

// GetAllWithProfiles mocks base method.
func (m *RuleRepository) GetAllWithProfiles(ctx context.Context) ([]model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithProfiles", ctx)
	ret0, _ := ret[0].([]model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithProfiles indicates an expected call of GetAllWithProfiles.
func (mr *RuleRepositoryMockRecorder) GetAllWithProfiles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithProfiles", reflect.TypeOf((*RuleRepository)(nil).GetAllWithProfiles), ctx)
}

// GetByID mocks base method.
func (m *RuleRepository) GetByID(ctx context.Context, id int) (model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *RuleRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*RuleRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *RuleRepository) Update(ctx context.Context, rule model.Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *RuleRepositoryMockRecorder) Update(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*RuleRepository)(nil).Update), ctx, rule)
}

// ProxyProfileRepository is a mock of ProxyProfileRepository interface.
type ProxyProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *ProxyProfileRepositoryMockRecorder
}

// ProxyProfileRepositoryMockRecorder is the mock recorder for ProxyProfileRepository.
type ProxyProfileRepositoryMockRecorder struct {
	mock *ProxyProfileRepository
}

// NewProxyProfileRepository creates a new mock instance.
func NewProxyProfileRepository(ctrl *gomock.Controller) *ProxyProfileRepository {
	mock := &ProxyProfileRepository{ctrl: ctrl}
	mock.recorder = &ProxyProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProxyProfileRepository) EXPECT() *ProxyProfileRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *ProxyProfileRepository) Create(ctx context.Context, profile *model.ProxyProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *ProxyProfileRepositoryMockRecorder) Create(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ProxyProfileRepository)(nil).Create), ctx, profile)
}

// Delete mocks base method.
func (m *ProxyProfileRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ProxyProfileRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ProxyProfileRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *ProxyProfileRepository) GetAll(ctx context.Context) ([]model.ProxyProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.ProxyProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *ProxyProfileRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*ProxyProfileRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *ProxyProfileRepository) GetByID(ctx context.Context, id int) (model.ProxyProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.ProxyProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *ProxyProfileRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*ProxyProfileRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *ProxyProfileRepository) Update(ctx context.Context, profile model.ProxyProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *ProxyProfileRepositoryMockRecorder) Update(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ProxyProfileRepository)(nil).Update), ctx, profile)
}

// PacService is a mock of pacService interface.
type PacService struct {
	ctrl     *gomock.Controller
	recorder *PacServiceMockRecorder
}

// PacServiceMockRecorder is the mock recorder for PacService.
type PacServiceMockRecorder struct {
	mock *PacService
}

// NewPacService creates a new mock instance.
func NewPacService(ctrl *gomock.Controller) *PacService {
	mock := &PacService{ctrl: ctrl}
	mock.recorder = &PacServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PacService) EXPECT() *PacServiceMockRecorder {
	return m.recorder
}

// GeneratePACFile mocks base method.
func (m *PacService) GeneratePACFile(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePACFile", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GeneratePACFile indicates an expected call of GeneratePACFile.
func (mr *PacServiceMockRecorder) GeneratePACFile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePACFile", reflect.TypeOf((*PacService)(nil).GeneratePACFile), ctx)
}
