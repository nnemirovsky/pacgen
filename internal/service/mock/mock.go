// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/nnemirovsky/pacgen/internal/model"
)

// MockRuleRepository is a mock of RuleRepository interface.
type MockRuleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRuleRepositoryMockRecorder
}

// MockRuleRepositoryMockRecorder is the mock recorder for MockRuleRepository.
type MockRuleRepositoryMockRecorder struct {
	mock *MockRuleRepository
}

// NewMockRuleRepository creates a new mock instance.
func NewMockRuleRepository(ctrl *gomock.Controller) *MockRuleRepository {
	mock := &MockRuleRepository{ctrl: ctrl}
	mock.recorder = &MockRuleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleRepository) EXPECT() *MockRuleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRuleRepository) Create(ctx context.Context, rule *model.Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRuleRepositoryMockRecorder) Create(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRuleRepository)(nil).Create), ctx, rule)
}

// Delete mocks base method.
func (m *MockRuleRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRuleRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRuleRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockRuleRepository) GetAll(ctx context.Context) ([]model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRuleRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRuleRepository)(nil).GetAll), ctx)
}

// GetAllWithProfiles mocks base method.
func (m *MockRuleRepository) GetAllWithProfiles(ctx context.Context) ([]model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithProfiles", ctx)
	ret0, _ := ret[0].([]model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithProfiles indicates an expected call of GetAllWithProfiles.
func (mr *MockRuleRepositoryMockRecorder) GetAllWithProfiles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithProfiles", reflect.TypeOf((*MockRuleRepository)(nil).GetAllWithProfiles), ctx)
}

// GetByID mocks base method.
func (m *MockRuleRepository) GetByID(ctx context.Context, id int) (model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRuleRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRuleRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockRuleRepository) Update(ctx context.Context, rule model.Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRuleRepositoryMockRecorder) Update(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRuleRepository)(nil).Update), ctx, rule)
}

// MockProxyProfileRepository is a mock of ProxyProfileRepository interface.
type MockProxyProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProxyProfileRepositoryMockRecorder
}

// MockProxyProfileRepositoryMockRecorder is the mock recorder for MockProxyProfileRepository.
type MockProxyProfileRepositoryMockRecorder struct {
	mock *MockProxyProfileRepository
}

// NewMockProxyProfileRepository creates a new mock instance.
func NewMockProxyProfileRepository(ctrl *gomock.Controller) *MockProxyProfileRepository {
	mock := &MockProxyProfileRepository{ctrl: ctrl}
	mock.recorder = &MockProxyProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyProfileRepository) EXPECT() *MockProxyProfileRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProxyProfileRepository) Create(ctx context.Context, profile *model.ProxyProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProxyProfileRepositoryMockRecorder) Create(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProxyProfileRepository)(nil).Create), ctx, profile)
}

// Delete mocks base method.
func (m *MockProxyProfileRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProxyProfileRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProxyProfileRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockProxyProfileRepository) GetAll(ctx context.Context) ([]model.ProxyProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.ProxyProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProxyProfileRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProxyProfileRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockProxyProfileRepository) GetByID(ctx context.Context, id int) (model.ProxyProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.ProxyProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProxyProfileRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProxyProfileRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockProxyProfileRepository) Update(ctx context.Context, profile model.ProxyProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProxyProfileRepositoryMockRecorder) Update(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProxyProfileRepository)(nil).Update), ctx, profile)
}

// MockPacService is a mock of pacService interface.
type MockPacService struct {
	ctrl     *gomock.Controller
	recorder *MockPacServiceMockRecorder
}

// MockPacServiceMockRecorder is the mock recorder for MockPacService.
type MockPacServiceMockRecorder struct {
	mock *MockPacService
}

// NewMockPacService creates a new mock instance.
func NewMockPacService(ctrl *gomock.Controller) *MockPacService {
	mock := &MockPacService{ctrl: ctrl}
	mock.recorder = &MockPacServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacService) EXPECT() *MockPacServiceMockRecorder {
	return m.recorder
}

// GeneratePACFile mocks base method.
func (m *MockPacService) GeneratePACFile(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePACFile", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GeneratePACFile indicates an expected call of GeneratePACFile.
func (mr *MockPacServiceMockRecorder) GeneratePACFile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePACFile", reflect.TypeOf((*MockPacService)(nil).GeneratePACFile), ctx)
}
